[{"C:\\Users\\purna\\week06\\personal-budget-react\\src\\index.js":"1","C:\\Users\\purna\\week06\\personal-budget-react\\src\\reportWebVitals.js":"2","C:\\Users\\purna\\week06\\personal-budget-react\\src\\App.js":"3","C:\\Users\\purna\\week06\\personal-budget-react\\src\\about\\about.js":"4","C:\\Users\\purna\\week06\\personal-budget-react\\src\\homepage\\homepage.js":"5","C:\\Users\\purna\\week06\\personal-budget-react\\src\\menu\\menu.js":"6","C:\\Users\\purna\\week06\\personal-budget-react\\src\\hero\\hero.js":"7","C:\\Users\\purna\\week06\\personal-budget-react\\src\\signup\\signup.js":"8","C:\\Users\\purna\\week06\\personal-budget-react\\src\\login\\login.js":"9","C:\\Users\\purna\\week06\\personal-budget-react\\src\\footer\\footer.js":"10","C:\\Users\\purna\\week06\\personal-budget-react\\src\\account\\account.js":"11","C:\\Users\\purna\\week06\\personal-budget-react\\src\\dashboard\\dashboard.js":"12"},{"size":536,"mtime":1697425998155,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1697419754011,"results":"15","hashOfConfig":"14"},{"size":1201,"mtime":1702075863668,"results":"16","hashOfConfig":"14"},{"size":135,"mtime":1697420632806,"results":"17","hashOfConfig":"14"},{"size":1984,"mtime":1701569362438,"results":"18","hashOfConfig":"14"},{"size":639,"mtime":1697420690356,"results":"19","hashOfConfig":"14"},{"size":223,"mtime":1697420656892,"results":"20","hashOfConfig":"14"},{"size":4198,"mtime":1702245432536,"results":"21","hashOfConfig":"14"},{"size":2919,"mtime":1702245420124,"results":"22","hashOfConfig":"14"},{"size":347,"mtime":1697420643380,"results":"23","hashOfConfig":"14"},{"size":1755,"mtime":1702194939803,"results":"24","hashOfConfig":"14"},{"size":13016,"mtime":1702268952233,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"ettp7h",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"29"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"29"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"29"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},"C:\\Users\\purna\\week06\\personal-budget-react\\src\\index.js",[],[],["67"],"C:\\Users\\purna\\week06\\personal-budget-react\\src\\reportWebVitals.js",[],[],"C:\\Users\\purna\\week06\\personal-budget-react\\src\\App.js",[],[],"C:\\Users\\purna\\week06\\personal-budget-react\\src\\about\\about.js",[],[],"C:\\Users\\purna\\week06\\personal-budget-react\\src\\homepage\\homepage.js",["68","69","70","71"],[],"import React, { useEffect, useRef } from 'react';\r\n\r\nimport { Chart } from 'chart.js/auto';\r\nimport * as d3 from 'd3';\r\n\r\n\r\nfunction Homepage() {\r\n \r\n  return (\r\n    <section className=\"container center\">\r\n      <article className=\"page-area\">\r\n        \r\n      <div className=\"text-box\">\r\n      <h1>Stay on track</h1>\r\n            <p>\r\n                Do you know where you are spending your money? If you really stop to track it down,\r\n                you would get surprised! Proper budget management depends on real data... and this\r\n                app will help you with that!\r\n            </p>\r\n        </div>\r\n        <div className=\"text-box\">\r\n      <h1>Alerts</h1>\r\n      <p>\r\n        What if your clothing budget ended? You will get an alert. The goal\r\n        is to never go over the budget.\r\n      </p>\r\n    </div>\r\n\r\n    <div className=\"text-box\">\r\n      <h1>Results</h1>\r\n      <p>\r\n        People who stick to a financial plan, budgeting every expense, get\r\n        out of debt faster! Also, they to live happier lives... since they\r\n        expend without guilt or fear... because they know it is all good and\r\n        accounted for.\r\n      </p>\r\n    </div>\r\n\r\n    <div className=\"text-box\">\r\n      <h1>Free</h1>\r\n      <p>\r\n        This app is free!!! And you are the only one holding your data!\r\n      </p>\r\n    </div>\r\n    <div className=\"text-box\">\r\n    <h1>Stay on tracksss</h1>\r\n            <p>\r\n                Do you know where you are spending your money? If you really stop to track it down,\r\n                you would get surprised! Proper budget management depends on real data... and this\r\n                app will help you with that!\r\n            </p>\r\n        </div>\r\n        <div className=\"text-box\">\r\n      <h1>Alertssss</h1>\r\n      <p>\r\n        What if your clothing budget ended? You will get an alert. The goal\r\n        is to never go over the budget.\r\n      </p>\r\n    </div>\r\n      </article>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Homepage;","C:\\Users\\purna\\week06\\personal-budget-react\\src\\menu\\menu.js",[],[],"C:\\Users\\purna\\week06\\personal-budget-react\\src\\hero\\hero.js",[],[],"C:\\Users\\purna\\week06\\personal-budget-react\\src\\signup\\signup.js",["72"],[],"import React, { Component } from 'react';\r\n\r\nclass SignUp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n      confirmPassword: '',\r\n      errors: {},\r\n    };\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const { username, email, password, confirmPassword } = this.state;\r\n\r\n    // Basic client-side validation\r\n    const errors = {};\r\n    if (!username.trim()) {\r\n      errors.username = 'Username is required';\r\n    }\r\n    if (!email.trim() || !/^\\S+@\\S+\\.\\S+$/.test(email)) {\r\n      errors.email = 'Invalid email address';\r\n    }\r\n    if (password !== confirmPassword) {\r\n      errors.confirmPassword = 'Passwords do not match';\r\n    }\r\n    if (password.length < 6) {\r\n      errors.password = 'Password must be at least 6 characters';\r\n    }\r\n\r\n    if (Object.keys(errors).length > 0) {\r\n      this.setState({ errors });\r\n      return;\r\n    }\r\n\r\n    // Continue with form submission to the server\r\n    try {\r\n      const response = await fetch('http://localhost:3031/signup', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ username, email, password, confirmPassword }),\r\n      });\r\n\r\n     \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error: Status ${response.status}`);\r\n      }\r\n      \r\n\r\n      // Check if the response is JSON\r\n      const contentType = response.headers.get('content-type');\r\n      if (!contentType || !contentType.includes('application/json')) {\r\n        throw new TypeError(\"Oops, we haven't got JSON!\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      alert('Sign-up successful!');\r\n      this.resetForm();\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      this.setState({ errors: { general: error.message } });\r\n    }\r\n  };\r\n\r\n  resetForm = () => {\r\n    this.setState({\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n      confirmPassword: '',\r\n      errors: {},\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { username, email, password, confirmPassword, errors } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <h2>Sign Up</h2>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div>\r\n            <label htmlFor=\"username\">Username:</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"username\"\r\n              name=\"username\"\r\n              value={username}\r\n              onChange={this.handleChange}\r\n              required\r\n            />\r\n            {errors.username && <div className=\"error\">{errors.username}</div>}\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"email\">Email:</label>\r\n            <input\r\n              type=\"email\"\r\n              id=\"email\"\r\n              name=\"email\"\r\n              value={email}\r\n              onChange={this.handleChange}\r\n              required\r\n            />\r\n            {errors.email && <div className=\"error\">{errors.email}</div>}\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"password\">Password:</label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"password\"\r\n              name=\"password\"\r\n              value={password}\r\n              onChange={this.handleChange}\r\n              required\r\n            />\r\n            {errors.password && <div className=\"error\">{errors.password}</div>}\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"confirmPassword\">Confirm Password:</label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"confirmPassword\"\r\n              name=\"confirmPassword\"\r\n              value={confirmPassword}\r\n              onChange={this.handleChange}\r\n              required\r\n            />\r\n            {errors.confirmPassword && (\r\n              <div className=\"error\">{errors.confirmPassword}</div>\r\n            )}\r\n          </div>\r\n          {errors.general && <div className=\"error\">{errors.general}</div>}\r\n          <button type=\"submit\">Sign Up</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SignUp;\r\n","C:\\Users\\purna\\week06\\personal-budget-react\\src\\login\\login.js",[],[],"C:\\Users\\purna\\week06\\personal-budget-react\\src\\footer\\footer.js",[],[],"C:\\Users\\purna\\week06\\personal-budget-react\\src\\account\\account.js",["73","74"],[],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { reactLocalStorage } from \"reactjs-localstorage\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst Account = () => {\r\n    const navigate = useNavigate();\r\n    const [username, setUsername] = useState(\"\");\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        const storedUsername = reactLocalStorage.get(\"username\");\r\n        setUsername(storedUsername || \"User\");\r\n    }, []);\r\n    \r\n\r\n    const signOut = () => {\r\n        // Remove the JWT and username from local storage and navigate to home\r\n        reactLocalStorage.remove(\"jwt\");\r\n        reactLocalStorage.remove(\"username\");\r\n        navigate(\"/\");\r\n    };\r\n\r\n \r\n\r\n    return (\r\n        <main className=\"center\" id=\"main\">\r\n            <div id=\"account\">\r\n                <h1 className=\"row\">Personal Account Management</h1>\r\n                <div>\r\n                    <p>Hello, <strong>{username}</strong>!</p>\r\n                </div>\r\n                <div>\r\n                    <button onClick={() => navigate(\"/dashboard\")}>Go To Dashboard</button>\r\n                </div>\r\n                <div>\r\n                    <button onClick={signOut}>Sign Out</button>\r\n                </div>\r\n                <div>\r\n                    <button onClick={() => navigate(\"/change_password\")}>Change Password</button>\r\n                </div>\r\n                <div>\r\n                    <button id=\"deleteButton\" onClick={() => navigate(\"/delete_account\")}>Delete Account</button>\r\n                </div>\r\n                {errorMessage && <div><p id=\"errorMessage\">{errorMessage}</p></div>}\r\n            </div>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default Account;\r\n","C:\\Users\\purna\\week06\\personal-budget-react\\src\\dashboard\\dashboard.js",["75","76","77"],[],"import React, { useRef, useState, useEffect } from 'react';\r\nimport Chart from 'chart.js/auto';\r\nimport { reactLocalStorage } from 'reactjs-localstorage';\r\nimport * as d3 from 'd3';\r\n\r\nconst BACKEND_URL = \"http://localhost:3031\";\r\n\r\nfunction Dashboard() {\r\n  const [budgetData, setBudgetData] = useState([]);\r\n  const [income, setIncome] = useState(0);\r\n  const [savings, setSavings] = useState(0);\r\n  const [title, setTitle] = useState('');\r\n  const [budget, setBudget] = useState('');\r\n  const [color, setColor] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  const lineChartRef = useRef(null);\r\n  const pieChartRef = useRef(null);\r\n\r\n  let lineChartInstance = null;\r\n  let piechartInstance = null;\r\n  \r\n  \r\n\r\n  useEffect(() => {\r\n    const token = reactLocalStorage.get('jwt');\r\n\r\n    if (token) {\r\n      console.log(token);\r\n      getBudget(token);\r\n    } else {\r\n      handleError('Token not available.');\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    createPieChart(budgetData);\r\n    createLineChart(savings, income, budgetData);\r\n    createDonutChart(budgetData);\r\n  }, [budgetData, income, savings]);\r\n\r\n  const getBudget = async (token) => {\r\n    try {\r\n      const response = await fetch(`${BACKEND_URL}/api/get_budget`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': token,\r\n        },\r\n        body: JSON.stringify({ token }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (data && data.ok === 1) {\r\n        setBudgetData(data.budgetData);\r\n        setIncome(data.income);\r\n        setSavings(data.savings);\r\n      } else {\r\n        handleError(data.message || \"Error in data response.\");\r\n      }\r\n    } catch (error) {\r\n      handleError(`Network Error: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  const addToBudget = async () => {\r\n    const token = reactLocalStorage.get('jwt');\r\n    const requestBody = { title, budget, color };\r\n\r\n    try {\r\n      const response = await fetch(`${BACKEND_URL}/api/add_budget`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify(requestBody),\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (data && data.ok === 1) {\r\n        setBudgetData(data.budgetData);\r\n      } else {\r\n        handleError(data.message || \"Error: Unknown error.\");\r\n      }\r\n    } catch (error) {\r\n      handleError(`Network Error: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  const deleteFromBudget = async (titleToDelete) => {\r\n    const token = reactLocalStorage.get('jwt');\r\n\r\n    try {\r\n      const response = await fetch(`${BACKEND_URL}/api/delete_from_budget`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({ title: titleToDelete }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (data && data.ok === 1) {\r\n        setBudgetData(budgetData.filter(item => item.title !== titleToDelete));\r\n      } else {\r\n        handleError(data.message || \"Error: Unknown error while deleting.\");\r\n      }\r\n    } catch (error) {\r\n      handleError(`Network Error: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  const updateIncome = async () => {\r\n    const token = reactLocalStorage.get('jwt');\r\n    const requestBody = { token, income }; // Assuming 'income' is a state variable\r\n  \r\n    try {\r\n      const response = await fetch(`${BACKEND_URL}/api/update_income`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify(requestBody),\r\n      });\r\n  \r\n      const data = await response.json();\r\n      if (data && data.ok === 1) {\r\n        setIncome(data.income); // Update the 'income' state with the new value\r\n      } else {\r\n        handleError(data.error || \"Error: Unknown error.\");\r\n      }\r\n    } catch (error) {\r\n      handleError(`Network Error: ${error.message}`);\r\n    }\r\n  };\r\n  \r\n\r\n  const updateSavings = async () => {\r\n    const token = reactLocalStorage.get('jwt');\r\n    const requestBody = { token, savings }; // Assuming 'savings' is a state variable\r\n  \r\n    try {\r\n      const response = await fetch(`${BACKEND_URL}/api/update_savings`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify(requestBody),\r\n      });\r\n  \r\n      const data = await response.json();\r\n      if (data && data.ok === 1) {\r\n        setSavings(data.savings); // Update the 'savings' state with the new value\r\n      } else {\r\n        handleError(data.error || \"Error: Unknown error.\");\r\n      }\r\n    } catch (error) {\r\n      handleError(`Network Error: ${error.message}`);\r\n    }\r\n  };\r\n  \r\n\r\n  const createPieChart = (budgetData) => {\r\n    const labels = budgetData.map((item) => item.title);\r\n    const data = budgetData.map((item) => item.budget);\r\n\r\n    const pieChartContext = pieChartRef.current.getContext('2d');\r\n\r\n    if (budgetData.length === 0) {\r\n      if (pieChartContext) {\r\n        pieChartContext.clearRect(0, 0, pieChartContext.canvas.width, pieChartContext.canvas.height);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (pieChartContext) {\r\n      piechartInstance = new Chart(pieChartContext, {\r\n        type: 'pie',\r\n        data: {\r\n          labels: labels,\r\n          datasets: [\r\n            {\r\n              data: data,\r\n              backgroundColor: budgetData.map((item) => item.color),\r\n            },\r\n          ],\r\n        },\r\n        options: {\r\n          plugins: {\r\n            legend: {\r\n              display: true,\r\n              position: 'bottom',\r\n            },\r\n            tooltip: {\r\n              callbacks: {\r\n                label: (context) => {\r\n                  const label = context.label || '';\r\n                  const value = context.parsed || 0;\r\n                  return `${label}: $${value.toFixed(2)}`;\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const createDonutChart = (budgetData) => {\r\n    const width = 400;\r\n    const height = 400;\r\n    const radius = Math.min(width, height) / 2;\r\n\r\n    const svg = d3.select('#donutChart') // Select the SVG element with id 'donutChart'\r\n      .append('svg')\r\n      .attr('width', width)\r\n      .attr('height', height)\r\n      .append('g')\r\n      .attr('transform', `translate(${width / 2},${height / 2})`);\r\n\r\n    const colorScale = d3.scaleOrdinal()\r\n      .domain(budgetData.map((d) => d.title))\r\n      .range([\"#5a82ff\", \"#ff66b2\", \"#a1ff33\", \"#ff8c33\", \"#33ffb2\", \"#b233ff\", \"#ffd433\", \"#9FE2BF\"]);\r\n\r\n    const pie = d3.pie()\r\n      .value((d) => d.budget);\r\n\r\n    const arc = d3.arc()\r\n      .outerRadius(radius - 20)\r\n      .innerRadius(radius - 100);\r\n\r\n    const arcs = svg.selectAll('.arc')\r\n      .data(pie(budgetData))\r\n      .enter()\r\n      .append('g')\r\n      .attr('class', 'arc');\r\n\r\n    arcs.append('path')\r\n      .attr('d', arc)\r\n      .attr('fill', (d) => colorScale(d.data.title));\r\n\r\n    arcs.append('line')\r\n      .attr('x1', (d) => arc.centroid(d)[0])\r\n      .attr('y1', (d) => arc.centroid(d)[1])\r\n      .attr('x2', (d) => {\r\n        const pos = arc.centroid(d);\r\n        const midAngle = Math.atan2(pos[1], pos[0]);\r\n        return Math.cos(midAngle) * (radius + 10);\r\n      })\r\n      .attr('y2', (d) => {\r\n        const pos = arc.centroid(d);\r\n        const midAngle = Math.atan2(pos[1], pos[0]);\r\n        return Math.sin(midAngle) * (radius + 10);\r\n      })\r\n      .attr('stroke', 'blue');\r\n\r\n    arcs.append('text')\r\n      .attr('transform', (d) => {\r\n        const pos = arc.centroid(d);\r\n        const midAngle = Math.atan2(pos[1], pos[0]);\r\n        return `translate(${Math.cos(midAngle) * (radius + 20)},${Math.sin(midAngle) * (radius + 20)})`;\r\n      })\r\n      .attr('dy', '0.8em')\r\n      .style('text-anchor', (d) => {\r\n        const pos = arc.centroid(d);\r\n        return Math.cos(Math.atan2(pos[1], pos[0])) > 0 ? 'start' : 'end';\r\n      })\r\n      .text((d) => `${d.data.title} (${d.data.budget})`);\r\n  };\r\n\r\n /* eslint-disable no-undef */\r\n\r\nconst createLineChart = (savings, income, budgetData) => {\r\n  // Check if budgetData is defined\r\n  if (!budgetData) {\r\n    return;\r\n  }\r\n\r\n  const totalBudget = budgetData.reduce((acc, item) => acc + item.budget, 0);\r\n  const profit = income - totalBudget;\r\n\r\n  const data = {\r\n    labels: ['Current', 'Projected'],\r\n    datasets: [\r\n      {\r\n        label: 'Balance Projection',\r\n        backgroundColor: profit > 0 ? '#ccffcc' : '#ffcccc',\r\n        data: [savings, savings + profit * 12], // Projecting for one year\r\n      },\r\n    ],\r\n  };\r\n\r\n  try {\r\n    // Destroy the existing lineChartInstance if it exists\r\n    if (lineChartInstance) {\r\n      lineChartInstance.destroy();\r\n    }\r\n\r\n    // Create a new lineChartInstance\r\n    lineChartInstance = new Chart(lineChartRef.current, {\r\n      type: 'line',\r\n      data: data,\r\n      options: {\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Chart creation error:\", error);\r\n  }\r\n};\r\n\r\n  \r\n  const handleError = (message) => {\r\n    setErrorMessage(message);\r\n    setTimeout(() => {\r\n      setErrorMessage('');\r\n    }, 5000);\r\n  };\r\n\r\n  const handleInputChange = (event, setter) => {\r\n    setter(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <main className=\"center\" id=\"main\">\r\n      <div id=\"dashboard\">\r\n        <h1>Budget Dashboard</h1>\r\n  \r\n        <div id=\"budgetTableHolder\">\r\n          {budgetData.length === 0 ? (\r\n            <p>You don't have any budget data yet! Get started by adding some budget data below.</p>\r\n          ) : (\r\n            <table id=\"budgetTable\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Title</th>\r\n                  <th>Budget</th>\r\n                  <th>Color</th>\r\n                  <th>Delete</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {budgetData.map((item, index) => (\r\n                  <tr key={index}>\r\n                    <td>{item.title}</td>\r\n                    <td>${item.budget}</td>\r\n                    <td>\r\n                      <div style={{ width: `${item.budget}%`, backgroundColor: item.color }}></div>\r\n                    </td>\r\n                    <td style={{ color: item.color }}>{item.color}</td>\r\n                    <td>\r\n                      <button onClick={() => deleteFromBudget(item.title)}>Delete</button>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          )}\r\n        </div>\r\n  \r\n        <div>\r\n          <h2>Add to Budget</h2>\r\n          <div id=\"addToBudget\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Title\"\r\n              value={title}\r\n              onChange={(e) => handleInputChange(e, setTitle)}\r\n            />\r\n            <input\r\n              type=\"number\"\r\n              placeholder=\"Budget\"\r\n              value={budget}\r\n              onChange={(e) => handleInputChange(e, setBudget)}\r\n            />\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Color\"\r\n              value={color}\r\n              onChange={(e) => handleInputChange(e, setColor)}\r\n            />\r\n            <button onClick={addToBudget}>Add</button>\r\n          </div>\r\n        </div>\r\n  \r\n        <div>\r\n          <p id=\"errorMessage\">{errorMessage}</p>\r\n        </div>\r\n  \r\n        <div id=\"pieChartHolder\">\r\n          <h2>Pie Chart</h2>\r\n          <canvas id=\"pieChart\" ref={pieChartRef} width=\"200\" height=\"200\"></canvas>\r\n        </div>\r\n  \r\n        <div id=\"lineChartHolder\">\r\n          <h2>Line Chart</h2>\r\n          <canvas id=\"lineChart\" ref={lineChartRef} width=\"400\" height=\"400\"></canvas>\r\n        </div>\r\n  \r\n        <div id=\"donutChartHolder\">\r\n          <h2>Donut Chart</h2>\r\n          <div id=\"donutChart\"></div> {/* Create a div for the D3.js chart */}\r\n        </div>\r\n  \r\n        <div>\r\n  <h2>Budget Settings</h2>\r\n  <div id=\"budgetSettings\">\r\n    {/* Input field for updating savings */}\r\n    <input\r\n      type=\"number\"\r\n      placeholder=\"Savings\"\r\n      value={savings}\r\n      onChange={(e) => handleInputChange(e, setSavings)}\r\n    />\r\n    \r\n    {/* Button to trigger the savings update */}\r\n    <button onClick={updateSavings}>Update Savings</button>\r\n    {/* Input field for updating income */}\r\n    <input\r\n      type=\"number\"\r\n      placeholder=\"Income\"\r\n      value={income}\r\n      onChange={(e) => handleInputChange(e, setIncome)}\r\n    />\r\n    \r\n    {/* Button to trigger the income update */}\r\n    <button onClick={updateIncome}>Update Income</button>\r\n  \r\n  </div>\r\n</div>\r\n\r\n      </div>\r\n    </main>\r\n  );\r\n  \r\n}\r\n\r\nexport default Dashboard;\r\n",{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":1,"column":17,"nodeType":"82","messageId":"83","endLine":1,"endColumn":26},{"ruleId":"80","severity":1,"message":"84","line":1,"column":28,"nodeType":"82","messageId":"83","endLine":1,"endColumn":34},{"ruleId":"80","severity":1,"message":"85","line":3,"column":10,"nodeType":"82","messageId":"83","endLine":3,"endColumn":15},{"ruleId":"80","severity":1,"message":"86","line":4,"column":13,"nodeType":"82","messageId":"83","endLine":4,"endColumn":15},{"ruleId":"80","severity":1,"message":"87","line":63,"column":13,"nodeType":"82","messageId":"83","endLine":63,"endColumn":17},{"ruleId":"80","severity":1,"message":"88","line":2,"column":8,"nodeType":"82","messageId":"83","endLine":2,"endColumn":13},{"ruleId":"80","severity":1,"message":"89","line":9,"column":26,"nodeType":"82","messageId":"83","endLine":9,"endColumn":41},{"ruleId":"80","severity":1,"message":"90","line":21,"column":7,"nodeType":"82","messageId":"83","endLine":21,"endColumn":23},{"ruleId":"91","severity":1,"message":"92","line":34,"column":6,"nodeType":"93","endLine":34,"endColumn":8,"suggestions":"94"},{"ruleId":"91","severity":1,"message":"95","line":40,"column":6,"nodeType":"93","endLine":40,"endColumn":35,"suggestions":"96"},"no-new-object",["97"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'Chart' is defined but never used.","'d3' is defined but never used.","'data' is assigned a value but never used.","'axios' is defined but never used.","'setErrorMessage' is assigned a value but never used.","'piechartInstance' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getBudget'. Either include it or remove the dependency array.","ArrayExpression",["98"],"React Hook useEffect has missing dependencies: 'createLineChart' and 'createPieChart'. Either include them or remove the dependency array.",["99"],"no-object-constructor",{"desc":"100","fix":"101"},{"desc":"102","fix":"103"},"Update the dependencies array to be: [getBudget]",{"range":"104","text":"105"},"Update the dependencies array to be: [budgetData, createLineChart, createPieChart, income, savings]",{"range":"106","text":"107"},[954,956],"[getBudget]",[1107,1136],"[budgetData, createLineChart, createPieChart, income, savings]"]